__text_start:
__start:
      1D E5CF      LDI	R28,0x5F
      1E E0D2      LDI	R29,2
      1F BFCD      OUT	0x3D,R28
      20 BFDE      OUT	0x3E,R29
      21 51CE      SUBI	R28,0x1E
      22 40D0      SBCI	R29,0
      23 EA0A      LDI	R16,0xAA
      24 8308      STD	Y+0,R16
      25 2400      CLR	R0
      26 E7E0      LDI	R30,0x70
      27 E0F0      LDI	R31,0
      28 E011      LDI	R17,1
      29 37E4      CPI	R30,0x74
      2A 07F1      CPC	R31,R17
      2B F011      BEQ	0x002E
      2C 9201      ST	R0,Z+
      2D CFFB      RJMP	0x0029
      2E 8300      STD	Z+0,R16
      2F E2EA      LDI	R30,0x2A
      30 E0F0      LDI	R31,0
      31 E6A0      LDI	R26,0x60
      32 E0B0      LDI	R27,0
      33 E010      LDI	R17,0
      34 E000      LDI	R16,0
      35 BF0B      OUT	0x3B,R16
      36 33EA      CPI	R30,0x3A
      37 07F1      CPC	R31,R17
      38 F021      BEQ	0x003D
      39 95C8      LPM
      3A 9631      ADIW	R30,1
      3B 920D      ST	R0,X+
      3C CFF9      RJMP	0x0036
      3D D171      RCALL	_main
_exit:
      3E CFFF      RJMP	_exit
_InitUART:
  x                    --> R10
  baudrate             --> R16
      3F 92AA      ST	R10,-Y
FILE: D:\AVR_Work\“斯科达”展示上用的AVR程序\sensor_avr\uartintr.h
(0001) /* Code adapted from Atmel AVR Application Note AVR306
(0002)  * Interrupt mode driver for UART.
(0003)  */
(0004) #include <io8515v.h>
(0005) #include <macros.h>
(0006) 
(0007) /* IMPORTANT: these vector numbers are for 8515! If you use other devices
(0008)  * you must change them to the different set of numbers.
(0009)  *
(0010)  * UART_RX_interrupt set to UART, Rx Complete
(0011)  * UART_TX_interrupt set to UART Data Register Empty
(0012)  */
(0013) 
(0014) #pragma interrupt_handler UART_RX_interrupt:10 UART_TX_interrupt:11
(0015) 
(0016) /* UART Buffer Defines */
(0017) #define UART_RX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
(0018) #define UART_RX_BUFFER_MASK ( UART_RX_BUFFER_SIZE - 1 )
(0019) #define UART_TX_BUFFER_SIZE 128 /* 1,2,4,8,16,32,64,128 or 256 bytes */
(0020) #define UART_TX_BUFFER_MASK ( UART_TX_BUFFER_SIZE - 1 )
(0021) 
(0022) #if ( UART_RX_BUFFER_SIZE & UART_RX_BUFFER_MASK )
(0023) #error RX buffer size is not a power of 2
(0024) #endif
(0025) 
(0026) /* Static Variables */
(0027) static unsigned char UART_RxBuf[UART_RX_BUFFER_SIZE];
(0028) static volatile unsigned char UART_RxHead;
(0029) static volatile unsigned char UART_RxTail;
(0030) static unsigned char UART_TxBuf[UART_TX_BUFFER_SIZE];
(0031) static volatile unsigned char UART_TxHead;
(0032) static volatile unsigned char UART_TxTail;
(0033) 
(0034) unsigned char UartData =0;
(0035) 
(0036) /* initialize UART */
(0037) void InitUART( unsigned char baudrate )
(0038) 	{
(0039) 	unsigned char x;
(0040) 	UBRR = baudrate; /* set the baud rate */
      40 B909      OUT	0x09,R16
(0041) 	/* enable UART receiver and transmitter, and
(0042) 	receive interrupt */
(0043) 	UCR = ( (1<<RXCIE) | (1<<RXEN) | (1<<TXEN) );
      41 E988      LDI	R24,0x98
      42 B98A      OUT	0x0A,R24
(0044) 	x = 0; /* flush receive buffer */
      43 24AA      CLR	R10
(0045) 	UART_RxTail = x;
      44 92A0 00F2 STS	UART_RxTail,R10
(0046) 	UART_RxHead = x;
      46 92A0 00F3 STS	uartintr.h:UART_RxHead,R10
(0047) 	UART_TxTail = x;
      48 92A0 0070 STS	UART_TxTail,R10
(0048) 	UART_TxHead = x;
      4A 92A0 0071 STS	uartintr.h:UART_TxHead,R10
      4C 90A9      LD	R10,Y+
      4D 9508      RET
_UART_RX_interrupt:
  data                 --> R16
  tmphead              --> R18
      4E 922A      ST	R2,-Y
      4F 930A      ST	R16,-Y
      50 932A      ST	R18,-Y
      51 933A      ST	R19,-Y
      52 938A      ST	R24,-Y
      53 939A      ST	R25,-Y
      54 93EA      ST	R30,-Y
      55 93FA      ST	R31,-Y
      56 B62F      IN	R2,0x3F
      57 922A      ST	R2,-Y
(0049) 	}
(0050) 
(0051) /* interrupt handlers */
(0052) void UART_RX_interrupt( void )
(0053) {
(0054) 	unsigned char data;
(0055) 	unsigned char tmphead;
(0056) 	data = UDR; /* read the received data */
      58 B10C      IN	R16,0x0C
(0057) 	/* calculate buffer index */
(0058) 	tmphead = ( UART_RxHead + 1 ) & UART_RX_BUFFER_MASK;
      59 9120 00F3 LDS	R18,uartintr.h:UART_RxHead
      5B 5F2F      SUBI	R18,0xFF
      5C 772F      ANDI	R18,0x7F
(0059) 	UART_RxHead = tmphead; /* store new index */
      5D 9320 00F3 STS	uartintr.h:UART_RxHead,R18
(0060) 	if ( tmphead == UART_RxTail )
      5F 9020 00F2 LDS	R2,UART_RxTail
      61 1522      CP	R18,R2
      62 F401      BNE	0x0063
(0061) 		{
(0062) 		/* ERROR! Receive buffer overflow */
(0063) 		}
(0064) 	UART_RxBuf[tmphead] = data; /* store received data in buffer */
      63 EF84      LDI	R24,0xF4
      64 E090      LDI	R25,0
      65 2FE2      MOV	R30,R18
      66 27FF      CLR	R31
      67 0FE8      ADD	R30,R24
      68 1FF9      ADC	R31,R25
      69 8300      STD	Z+0,R16
      6A 9029      LD	R2,Y+
      6B BE2F      OUT	0x3F,R2
      6C 91F9      LD	R31,Y+
      6D 91E9      LD	R30,Y+
      6E 9199      LD	R25,Y+
      6F 9189      LD	R24,Y+
      70 9139      LD	R19,Y+
      71 9129      LD	R18,Y+
      72 9109      LD	R16,Y+
      73 9029      LD	R2,Y+
      74 9518      RETI
_UART_TX_interrupt:
  tmptail              --> R16
      75 922A      ST	R2,-Y
      76 923A      ST	R3,-Y
      77 930A      ST	R16,-Y
      78 931A      ST	R17,-Y
      79 938A      ST	R24,-Y
      7A 939A      ST	R25,-Y
      7B 93EA      ST	R30,-Y
      7C 93FA      ST	R31,-Y
      7D B62F      IN	R2,0x3F
      7E 922A      ST	R2,-Y
(0065) }
(0066) 
(0067) void UART_TX_interrupt( void )
(0068) {
(0069) 	unsigned char tmptail;
(0070) 
(0071) 	/* check if all data is transmitted */
(0072) 	if ( UART_TxHead != UART_TxTail )
      7F 9020 0070 LDS	R2,UART_TxTail
      81 9030 0071 LDS	R3,uartintr.h:UART_TxHead
      83 1432      CP	R3,R2
      84 F079      BEQ	0x0094
(0073) 		{
(0074) 		/* calculate buffer index */
(0075) 		tmptail = ( UART_TxTail + 1 ) & UART_TX_BUFFER_MASK;
      85 9100 0070 LDS	R16,UART_TxTail
      87 5F0F      SUBI	R16,0xFF
      88 770F      ANDI	R16,0x7F
(0076) 		UART_TxTail = tmptail; /* store new index */
      89 9300 0070 STS	UART_TxTail,R16
(0077) 		UDR = UART_TxBuf[tmptail]; /* start transmition */
      8B E782      LDI	R24,0x72
      8C E090      LDI	R25,0
      8D 2FE0      MOV	R30,R16
      8E 27FF      CLR	R31
      8F 0FE8      ADD	R30,R24
      90 1FF9      ADC	R31,R25
      91 8020      LDD	R2,Z+0
      92 B82C      OUT	0x0C,R2
(0078) 		}
      93 C001      RJMP	0x0095
(0079) 	else
(0080) 		{
(0081) 		UCR &= ~(1<<UDRIE); /* disable UDRE interrupt */
      94 9855      CBI	0x0A,5
(0082) 		}
      95 9029      LD	R2,Y+
      96 BE2F      OUT	0x3F,R2
      97 91F9      LD	R31,Y+
      98 91E9      LD	R30,Y+
      99 9199      LD	R25,Y+
      9A 9189      LD	R24,Y+
      9B 9119      LD	R17,Y+
      9C 9109      LD	R16,Y+
      9D 9039      LD	R3,Y+
      9E 9029      LD	R2,Y+
      9F 9518      RETI
(0083) 	}
(0084) 
(0085) /* Read and write functions */
(0086) unsigned char ReceiveByte( void )
(0087) 	{
(0088) 	unsigned char tmptail;
(0089) 
(0090) 	if(UART_RxHead == UART_RxTail)//do not wait if no data,return -1;
_ReceiveByte:
  tmptail              --> R16
      A0 9020 00F2 LDS	R2,UART_RxTail
      A2 9030 00F3 LDS	R3,uartintr.h:UART_RxHead
      A4 1432      CP	R3,R2
      A5 F411      BNE	0x00A8
(0091) 	return 0xFF;
      A6 EF0F      LDI	R16,0xFF
      A7 C00D      RJMP	0x00B5
(0092) 	//while ( UART_RxHead == UART_RxTail ) /* wait for incomming data */
(0093) 		//;
(0094) 	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;/* calculate buffer index */
      A8 9100 00F2 LDS	R16,UART_RxTail
      AA 5F0F      SUBI	R16,0xFF
      AB 770F      ANDI	R16,0x7F
(0095) 	UART_RxTail = tmptail; /* store new index */
      AC 9300 00F2 STS	UART_RxTail,R16
(0096) 	return UART_RxBuf[tmptail]; /* return data */
      AE EF84      LDI	R24,0xF4
      AF E090      LDI	R25,0
      B0 2FE0      MOV	R30,R16
      B1 27FF      CLR	R31
      B2 0FE8      ADD	R30,R24
      B3 1FF9      ADC	R31,R25
      B4 8100      LDD	R16,Z+0
      B5 9508      RET
_TransmitByte:
  tmphead              --> R20
  data                 --> R16
      B6 934A      ST	R20,-Y
      B7 935A      ST	R21,-Y
(0097) 	}
(0098) 
(0099) void TransmitByte( unsigned char data )
(0100) 	{
(0101) 	unsigned char tmphead;
(0102) 	/* calculate buffer index */
(0103) 	tmphead = ( UART_TxHead + 1 ) & UART_TX_BUFFER_MASK; 
      B8 9140 0071 LDS	R20,uartintr.h:UART_TxHead
      BA 5F4F      SUBI	R20,0xFF
      BB 774F      ANDI	R20,0x7F
(0104) 		/* wait for free space in buffer */
(0105) 
(0106) 	while ( tmphead == UART_TxTail )
      BC 9020 0070 LDS	R2,UART_TxTail
      BE 1542      CP	R20,R2
      BF F3E1      BEQ	0x00BC
(0107) 		;
(0108) 	UART_TxBuf[tmphead] = data; /* store data in buffer */
      C0 E782      LDI	R24,0x72
      C1 E090      LDI	R25,0
      C2 2FE4      MOV	R30,R20
      C3 27FF      CLR	R31
      C4 0FE8      ADD	R30,R24
      C5 1FF9      ADC	R31,R25
      C6 8300      STD	Z+0,R16
(0109) 	UART_TxHead = tmphead; /* store new index */
      C7 9340 0071 STS	uartintr.h:UART_TxHead,R20
(0110) 	UCR |= (1<<UDRIE); /* enable UDRE interrupt */
      C9 9A55      SBI	0x0A,5
      CA 9159      LD	R21,Y+
      CB 9149      LD	R20,Y+
      CC 9508      RET
(0111) 	}
(0112) 
(0113) unsigned char DataInReceiveBuffer( void )
(0114) 	{
(0115) 	return ( UART_RxHead != UART_RxTail ); 
_DataInReceiveBuffer:
      CD 9020 00F2 LDS	R2,UART_RxTail
      CF 9030 00F3 LDS	R3,uartintr.h:UART_RxHead
      D1 1432      CP	R3,R2
      D2 F019      BEQ	0x00D6
      D3 E001      LDI	R16,1
      D4 E010      LDI	R17,0
      D5 C002      RJMP	0x00D8
      D6 2700      CLR	R16
      D7 2711      CLR	R17
      D8 9508      RET
_SendString:
  i                    --> R20
  str                  --> R10
      D9 D204      RCALL	push_xgset300C
      DA 2EA0      MOV	R10,R16
      DB 2EB1      MOV	R11,R17
(0116) 		/* return 0 (FALSE) if the receive buffer is empty */
(0117) 	}
(0118) 
(0119) void SendString(char *str)
(0120) {
(0121) int i;
(0122) for(i=2;i>=0;i--)
      DC E042      LDI	R20,2
      DD E050      LDI	R21,0
(0123) TransmitByte(str[i]);
      DE 2FE4      MOV	R30,R20
      DF 2FF5      MOV	R31,R21
      E0 0DEA      ADD	R30,R10
      E1 1DFB      ADC	R31,R11
      E2 8100      LDD	R16,Z+0
      E3 DFD2      RCALL	_TransmitByte
      E4 5041      SUBI	R20,1
      E5 4050      SBCI	R21,0
      E6 3040      CPI	R20,0
      E7 E0E0      LDI	R30,0
      E8 075E      CPC	R21,R30
      E9 F7A4      BGE	0x00DE
      EA C1F8      RJMP	pop_xgset300C
_ISR_int0_handler:
      EB 922A      ST	R2,-Y
      EC 923A      ST	R3,-Y
      ED 924A      ST	R4,-Y
      EE 925A      ST	R5,-Y
      EF B62F      IN	R2,0x3F
      F0 922A      ST	R2,-Y
FILE: D:\AVR_Work\“斯科达”展示上用的AVR程序\sensor_avr\SpeedDection.h
(0001) #include <io8515v.h>
(0002) #include <macros.h>
(0003) 
(0004) #pragma interrupt_handler ISR_int0_handler:2 TIMER1_OVF:7 ISR_int1_handler:3
(0005) 
(0006) #define CLK_DIV_BY_1		0x01 
(0007) #define CLK_DIV_BY_8		0x02  
(0008) #define CLK_DIV_BY_64		0x03  
(0009) #define CLK_DIV_BY_256		0x04
(0010) #define CLK_DIV_BY_1024		0x05
(0011) #define TMR1_OVF_INT_ENA	0x80
(0012) #define INT0_ENA_INT1_ENA	0xC0
(0013) #define INT0_TRIG_FALLING_EDGE_INT1_TRIG_FALLING_EDGE	0x0A
(0014) 
(0015) //int PreviousNum =0;
(0016) //int CurrentNum =0;
(0017) //int count =0;
(0018) //int Frequency =0;
(0019) //static int SubNum =0;
(0020) //static int temptime =0;
(0021) //static unsigned char StartFlag =0;
(0022) //unsigned char Data[4] ={'#',0,0,'#'};
(0023) int s_count=0;
(0024) int AngleCountTime = 0;
(0025) int SpeedCountTime = 0;
(0026) 
(0027) void ISR_int0_handler()
(0028) {
(0029) 	s_count -= (AngleCountTime*256+TCNT0);
      F1 B622      IN	R2,0x32
      F2 9040 0063 LDS	R4,AngleCountTime
      F4 9050 0064 LDS	R5,AngleCountTime+1
      F6 2C34      MOV	R3,R4
      F7 9040 0061 LDS	R4,s_count
      F9 9050 0062 LDS	R5,s_count+1
      FB 1842      SUB	R4,R2
      FC 0853      SBC	R5,R3
      FD 9250 0062 STS	s_count+1,R5
      FF 9240 0061 STS	s_count,R4
(0030) 	AngleCountTime=0;
     101 2422      CLR	R2
     102 2433      CLR	R3
     103 9230 0064 STS	AngleCountTime+1,R3
     105 9220 0063 STS	AngleCountTime,R2
(0031) 	TCNT0=0;
     107 BE22      OUT	0x32,R2
     108 9029      LD	R2,Y+
     109 BE2F      OUT	0x3F,R2
     10A 9059      LD	R5,Y+
     10B 9049      LD	R4,Y+
     10C 9039      LD	R3,Y+
     10D 9029      LD	R2,Y+
     10E 9518      RETI
_ISR_int1_handler:
     10F 922A      ST	R2,-Y
     110 923A      ST	R3,-Y
     111 924A      ST	R4,-Y
     112 925A      ST	R5,-Y
     113 B62F      IN	R2,0x3F
     114 922A      ST	R2,-Y
(0032) 
(0033) 	//CurrentNum = TCNT1H*256+TCNT1L;	
(0034) 	//StartFlag =1;
(0035) 	//count++;	
(0036) }
(0037) 
(0038) void ISR_int1_handler()
(0039) {
(0040)     s_count += (AngleCountTime*256+TCNT0);
     115 B622      IN	R2,0x32
     116 9040 0063 LDS	R4,AngleCountTime
     118 9050 0064 LDS	R5,AngleCountTime+1
     11A 2C34      MOV	R3,R4
     11B 9040 0061 LDS	R4,s_count
     11D 9050 0062 LDS	R5,s_count+1
     11F 0C42      ADD	R4,R2
     120 1C53      ADC	R5,R3
     121 9250 0062 STS	s_count+1,R5
     123 9240 0061 STS	s_count,R4
(0041) 	AngleCountTime=0;
     125 2422      CLR	R2
     126 2433      CLR	R3
     127 9230 0064 STS	AngleCountTime+1,R3
     129 9220 0063 STS	AngleCountTime,R2
(0042) 	TCNT0=0;
     12B BE22      OUT	0x32,R2
     12C 9029      LD	R2,Y+
     12D BE2F      OUT	0x3F,R2
     12E 9059      LD	R5,Y+
     12F 9049      LD	R4,Y+
     130 9039      LD	R3,Y+
     131 9029      LD	R2,Y+
     132 9518      RETI
_TIMER1_OVF:
     133 922A      ST	R2,-Y
     134 938A      ST	R24,-Y
     135 939A      ST	R25,-Y
     136 B62F      IN	R2,0x3F
     137 922A      ST	R2,-Y
(0043) 
(0044)     /*will lead to acummulative error
(0045) 	s_count += (AngleCountTime*256+TCNT0);
(0046) 	TCNT0=0;
(0047) 	AngleCountTime=0;*/	
(0048) }
(0049) 
(0050) void TIMER1_OVF()
(0051) {	           
(0052) 	TCNT1L = 0x00;
     138 2422      CLR	R2
     139 BC2C      OUT	0x2C,R2
(0053) 	TCNT1H = 0x00;
     13A BC2D      OUT	0x2D,R2
(0054) 	SpeedCountTime++;	
     13B 9180 0065 LDS	R24,SpeedCountTime
     13D 9190 0066 LDS	R25,SpeedCountTime+1
     13F 9601      ADIW	R24,1
     140 9390 0066 STS	SpeedCountTime+1,R25
     142 9380 0065 STS	SpeedCountTime,R24
     144 9029      LD	R2,Y+
     145 BE2F      OUT	0x3F,R2
     146 9199      LD	R25,Y+
     147 9189      LD	R24,Y+
     148 9029      LD	R2,Y+
     149 9518      RETI
(0055) }
(0056) 
(0057) void InitTimer1()
(0058) {
(0059)     TCCR1B =0x00;
_InitTimer1:
     14A 2422      CLR	R2
     14B BC2E      OUT	0x2E,R2
(0060) 	TCCR1A = 0;
     14C BC2F      OUT	0x2F,R2
(0061) 	TCNT1H = 0x00;           
     14D BC2D      OUT	0x2D,R2
(0062) 	TCNT1L = 0x00;
     14E BC2C      OUT	0x2C,R2
(0063) 	TCCR1B = 0x07;
     14F E087      LDI	R24,7
     150 BD8E      OUT	0x2E,R24
(0064) 	TIMSK |= (1<<TOIE1);
     151 B789      IN	R24,0x39
     152 6880      ORI	R24,0x80
     153 BF89      OUT	0x39,R24
     154 9508      RET
(0065) }
(0066) 
(0067) void OpenInt0_Int1()
(0068) {
(0069)     MCUCR = INT0_TRIG_FALLING_EDGE_INT1_TRIG_FALLING_EDGE;
_OpenInt0_Int1:
     155 E08A      LDI	R24,0xA
     156 BF85      OUT	0x35,R24
(0070) 	GIMSK = INT0_ENA_INT1_ENA;	
     157 EC80      LDI	R24,0xC0
     158 BF8B      OUT	0x3B,R24
     159 9508      RET
_TIMER0_OVF:
     15A 922A      ST	R2,-Y
     15B 938A      ST	R24,-Y
     15C 939A      ST	R25,-Y
     15D B62F      IN	R2,0x3F
     15E 922A      ST	R2,-Y
FILE: D:\AVR_Work\“斯科达”展示上用的AVR程序\sensor_avr\Angel_Speed.c
(0001) #include "uartintr.h"
(0002) #include "SpeedDection.h"
(0003) 
(0004) #pragma interrupt_handler TIMER0_OVF:8
(0005) 
(0006) //int PreCountNum = 0,CurrentCountNum = 0;
(0007) //unsigned char SubNum =0;
(0008) //int DataH =0,DataL = 0;
(0009) //int flag= 0;
(0010) int Orientation=0;
(0011) int angle=0,pos = 0;
(0012) //unsigned char TestNum;
(0013) extern int s_count;
(0014) extern int AngleCountTime;
(0015) 
(0016) unsigned char Data[3] ={'#',0,0};
(0017) 
(0018) void TIMER0_OVF()
(0019) {
(0020) 	TCNT0 = 00; 
     15F 2422      CLR	R2
     160 BE22      OUT	0x32,R2
(0021) 	AngleCountTime++;
     161 9180 0063 LDS	R24,AngleCountTime
     163 9190 0064 LDS	R25,AngleCountTime+1
     165 9601      ADIW	R24,1
     166 9390 0064 STS	AngleCountTime+1,R25
     168 9380 0063 STS	AngleCountTime,R24
     16A 9029      LD	R2,Y+
     16B BE2F      OUT	0x3F,R2
     16C 9199      LD	R25,Y+
     16D 9189      LD	R24,Y+
     16E 9029      LD	R2,Y+
     16F 9518      RETI
(0022) }
(0023) 
(0024) void InitTimer0()
(0025) {
(0026) 	TCCR0 = 0x07;
_InitTimer0:
     170 E087      LDI	R24,7
     171 BF83      OUT	0x33,R24
(0027) 	TCNT0 = 00;
     172 2422      CLR	R2
     173 BE22      OUT	0x32,R2
(0028) 	TIMSK |= (1<<TOIE0);
     174 B789      IN	R24,0x39
     175 6082      ORI	R24,2
     176 BF89      OUT	0x39,R24
     177 9508      RET
(0029) }
(0030) 
(0031) void Initial()
(0032) {
(0033) 	TCNT0 = 00;//8 bits counter
_Initial:
     178 2422      CLR	R2
     179 BE22      OUT	0x32,R2
(0034) 	TCNT1H = 0x00;// 16bits counter high byte           
     17A BC2D      OUT	0x2D,R2
(0035) 	TCNT1L = 0x00;//low byte
     17B BC2C      OUT	0x2C,R2
(0036) 	s_count=0;//software counter
     17C 2433      CLR	R3
     17D 9230 0062 STS	s_count+1,R3
     17F 9220 0061 STS	s_count,R2
(0037) 	angle=0;//angle of handle
     181 9230 006A STS	angle+1,R3
     183 9220 0069 STS	angle,R2
(0038) 	pos = 0;//position
     185 9230 006C STS	pos+1,R3
     187 9220 006B STS	pos,R2
(0039) 	AngleCountTime =0;//times of TCNT0 overflow
     189 9230 0064 STS	AngleCountTime+1,R3
     18B 9220 0063 STS	AngleCountTime,R2
(0040) 	SpeedCountTime =0;//Position CountTime;
     18D 9230 0066 STS	SpeedCountTime+1,R3
     18F 9220 0065 STS	SpeedCountTime,R2
(0041) 	Data[1] =0;
     191 9220 006E STS	Data+1,R2
(0042) 	Data[2] =0;	
     193 9220 006F STS	Data+2,R2
     195 9508      RET
(0043) }
(0044) 
(0045) int DectectOrientation()
(0046) {
(0047) 	return (PINB & (1 << PB2) );
_DectectOrientation:
     196 B306      IN	R16,0x16
     197 2711      CLR	R17
     198 7004      ANDI	R16,4
     199 7010      ANDI	R17,0
     19A 9508      RET
(0048) 	
(0049) }
(0050) 
(0051) void InitAngle()
(0052) {
(0053)  	 		TCNT0 = 00;
_InitAngle:
     19B 2422      CLR	R2
     19C BE22      OUT	0x32,R2
(0054) 			//TCNT1H = 0x00;           
(0055) 			//TCNT1L = 0x00;
(0056) 			s_count=0;
     19D 2433      CLR	R3
     19E 9230 0062 STS	s_count+1,R3
     1A0 9220 0061 STS	s_count,R2
(0057) 			angle=0;
     1A2 9230 006A STS	angle+1,R3
     1A4 9220 0069 STS	angle,R2
(0058) 			//pos = 0;
(0059) 			AngleCountTime =0;
     1A6 9230 0064 STS	AngleCountTime+1,R3
     1A8 9220 0063 STS	AngleCountTime,R2
(0060) 			Data[1] =0;
     1AA 9220 006E STS	Data+1,R2
(0061) 			Data[2] =0;
     1AC 9220 006F STS	Data+2,R2
     1AE 9508      RET
_main:
  VER                  --> Y,+0
  i                    --> R20
     1AF 9760      SBIW	R28,0x10
(0062) }
(0063) 
(0064) void main()
(0065) {
(0066) 
(0067) 
(0068) 	char VER[] = "VIRTUALBICYCLE#";	
     1B0 E18A      LDI	R24,0x1A
     1B1 E090      LDI	R25,0
     1B2 2FEC      MOV	R30,R28
     1B3 2FFD      MOV	R31,R29
     1B4 E100      LDI	R16,0x10
     1B5 E010      LDI	R17,0
     1B6 93FA      ST	R31,-Y
     1B7 93EA      ST	R30,-Y
     1B8 939A      ST	R25,-Y
     1B9 938A      ST	R24,-Y
     1BA D12D      RCALL	asgncblk
(0069) 	int i;
(0070) 	DDRB = 0x00;//"0"-input;"1"-output
     1BB 2422      CLR	R2
     1BC BA27      OUT	0x17,R2
(0071) 	PORTB = 0x03;
     1BD E083      LDI	R24,3
     1BE BB88      OUT	0x18,R24
(0072) 	DDRA = 0x00;
     1BF BA2A      OUT	0x1A,R2
(0073) 	PORTA = 0xFF;
     1C0 EF8F      LDI	R24,0xFF
     1C1 BB8B      OUT	0x1B,R24
(0074) 	DDRC = 0x00;//
     1C2 BA24      OUT	0x14,R2
(0075) 	PORTC = 0xFF;//initial value
     1C3 BB85      OUT	0x15,R24
(0076) 
(0077) 	InitUART(11);//set bandrate,19200 in 3.686M
     1C4 E00B      LDI	R16,0xB
     1C5 DE79      RCALL	_InitUART
(0078) 	InitTimer0();
     1C6 DFA9      RCALL	_InitTimer0
(0079) 	InitTimer1();
     1C7 DF82      RCALL	_InitTimer1
(0080) 	OpenInt0_Int1();
     1C8 DF8C      RCALL	_OpenInt0_Int1
(0081) 	
(0082)     
(0083) 
(0084) 	_SEI();	
     1C9 9478      BSET	7
     1CA C110      RJMP	0x02DB
(0085) 
(0086) 	while(1)
(0087) 	{
(0088) 	    //check if Z is high,         
(0089)         if( PINA  & (1 << PA7))//PA7 is high, corresponding to Z high.which is zero position signal of sensor
     1CB 9BCF      SBIS	0x19,7
     1CC C001      RJMP	0x01CE
(0090)         {
(0091) 			InitAngle();
     1CD DFCD      RCALL	_InitAngle
(0092)         }
(0093) 		
(0094) 		switch(ReceiveByte())
     1CE DED1      RCALL	_ReceiveByte
     1CF 2F40      MOV	R20,R16
     1D0 2755      CLR	R21
     1D1 3542      CPI	R20,0x52
     1D2 E0E0      LDI	R30,0
     1D3 075E      CPC	R21,R30
     1D4 F409      BNE	0x01D6
     1D5 C0EF      RJMP	0x02C5
     1D6 3543      CPI	R20,0x53
     1D7 E0E0      LDI	R30,0
     1D8 075E      CPC	R21,R30
     1D9 F409      BNE	0x01DB
     1DA C0DD      RJMP	0x02B8
     1DB E583      LDI	R24,0x53
     1DC E090      LDI	R25,0
     1DD 1784      CP	R24,R20
     1DE 0795      CPC	R25,R21
     1DF F0A4      BLT	0x01F4
     1E0 3441      CPI	R20,0x41
     1E1 E0E0      LDI	R30,0
     1E2 075E      CPC	R21,R30
     1E3 F409      BNE	0x01E5
     1E4 C075      RJMP	0x025A
     1E5 3442      CPI	R20,0x42
     1E6 E0E0      LDI	R30,0
     1E7 075E      CPC	R21,R30
     1E8 F409      BNE	0x01EA
     1E9 C0AE      RJMP	0x0298
     1EA 3443      CPI	R20,0x43
     1EB E0E0      LDI	R30,0
     1EC 075E      CPC	R21,R30
     1ED F409      BNE	0x01EF
     1EE C0C2      RJMP	0x02B1
     1EF 3444      CPI	R20,0x44
     1F0 E0E0      LDI	R30,0
     1F1 075E      CPC	R21,R30
     1F2 F039      BEQ	0x01FA
     1F3 C0E7      RJMP	0x02DB
     1F4 3F4F      CPI	R20,0xFF
     1F5 E0E0      LDI	R30,0
     1F6 075E      CPC	R21,R30
     1F7 F409      BNE	0x01F9
     1F8 C0E2      RJMP	0x02DB
     1F9 C0E1      RJMP	0x02DB
(0095) 		{
(0096) 		case 0xFF:break; 
(0097) 		case 'D':/*Sending ALL*/
(0098) 		
(0099) 		/*case A*/
(0100) 			 if(DectectOrientation())
     1FA DF9B      RCALL	_DectectOrientation
     1FB 3000      CPI	R16,0
     1FC 0701      CPC	R16,R17
     1FD F089      BEQ	0x020F
(0101) 			{
(0102) 				angle = s_count+(AngleCountTime*256+TCNT0);
     1FE B622      IN	R2,0x32
     1FF 9040 0063 LDS	R4,AngleCountTime
     201 9050 0064 LDS	R5,AngleCountTime+1
     203 2C34      MOV	R3,R4
     204 9040 0061 LDS	R4,s_count
     206 9050 0062 LDS	R5,s_count+1
     208 0C42      ADD	R4,R2
     209 1C53      ADC	R5,R3
     20A 9250 006A STS	angle+1,R5
     20C 9240 0069 STS	angle,R4
(0103) 			}
     20E C010      RJMP	0x021F
(0104) 			else
(0105) 			{
(0106) 				angle = s_count-(AngleCountTime*256+TCNT0);
     20F B622      IN	R2,0x32
     210 9040 0063 LDS	R4,AngleCountTime
     212 9050 0064 LDS	R5,AngleCountTime+1
     214 2C34      MOV	R3,R4
     215 9040 0061 LDS	R4,s_count
     217 9050 0062 LDS	R5,s_count+1
     219 1842      SUB	R4,R2
     21A 0853      SBC	R5,R3
     21B 9250 006A STS	angle+1,R5
     21D 9240 0069 STS	angle,R4
(0107) 			}
(0108) 			Data[1] =angle>>8;//high 
     21F 9020 0069 LDS	R2,angle
     221 9030 006A LDS	R3,angle+1
     223 2C23      MOV	R2,R3
     224 2433      CLR	R3
     225 FC27      SBRC	R2,7
     226 9430      COM	R3
     227 9220 006E STS	Data+1,R2
(0109) 			Data[2] =angle&0x00FF;//low	
     229 9180 0069 LDS	R24,angle
     22B 9190 006A LDS	R25,angle+1
     22D 7090      ANDI	R25,0
     22E 9380 006F STS	Data+2,R24
(0110) 			TransmitByte('A');
     230 E401      LDI	R16,0x41
     231 DE84      RCALL	_TransmitByte
(0111) 			SendString(Data);//send data[2] first,then data[1],data[0];
     232 E60D      LDI	R16,0x6D
     233 E010      LDI	R17,0
     234 DEA4      RCALL	_SendString
(0112) 			
(0113) 		/*case B*/
(0114) 			pos = TCNT1H*256+TCNT1L;
     235 B42C      IN	R2,0x2C
     236 B43D      IN	R3,0x2D
     237 9230 006C STS	pos+1,R3
     239 9220 006B STS	pos,R2
(0115) 			Data[1] =pos>>8;
     23B 2C23      MOV	R2,R3
     23C 2433      CLR	R3
     23D FC27      SBRC	R2,7
     23E 9430      COM	R3
     23F 9220 006E STS	Data+1,R2
(0116) 			Data[2] =pos&0x00FF;	
     241 9180 006B LDS	R24,pos
     243 9190 006C LDS	R25,pos+1
     245 7090      ANDI	R25,0
     246 9380 006F STS	Data+2,R24
(0117) 			TransmitByte('B');
     248 E402      LDI	R16,0x42
     249 DE6C      RCALL	_TransmitByte
(0118) 			SendString(Data);
     24A E60D      LDI	R16,0x6D
     24B E010      LDI	R17,0
     24C DE8C      RCALL	_SendString
(0119) 				
(0120) 		/*case S*/
(0121) 			TransmitByte('S');
     24D E503      LDI	R16,0x53
     24E DE67      RCALL	_TransmitByte
(0122) 			//if(PINA & (1 << PA2));
(0123) 			
(0124) 			PORTC = PINC;
     24F B223      IN	R2,0x13
     250 BA25      OUT	0x15,R2
(0125) 			TransmitByte(PORTC);
     251 B305      IN	R16,0x15
     252 DE63      RCALL	_TransmitByte
(0126) 			
(0127) 			PORTA = PINA;
     253 B229      IN	R2,0x19
     254 BA2B      OUT	0x1B,R2
(0128) 			TransmitByte(PORTA);
     255 B30B      IN	R16,0x1B
     256 DE5F      RCALL	_TransmitByte
(0129) 			TransmitByte('#');		
     257 E203      LDI	R16,0x23
     258 DE5D      RCALL	_TransmitByte
(0130) 		break;
     259 C081      RJMP	0x02DB
(0131) 		
(0132) 		case 'A'://angle
(0133) 			if(DectectOrientation())
     25A DF3B      RCALL	_DectectOrientation
     25B 2EA0      MOV	R10,R16
     25C 2EB1      MOV	R11,R17
     25D 3000      CPI	R16,0
     25E 0701      CPC	R16,R17
     25F F089      BEQ	0x0271
(0134) 			{
(0135) 				angle = s_count+(AngleCountTime*256+TCNT0);
     260 B622      IN	R2,0x32
     261 9040 0063 LDS	R4,AngleCountTime
     263 9050 0064 LDS	R5,AngleCountTime+1
     265 2C34      MOV	R3,R4
     266 9040 0061 LDS	R4,s_count
     268 9050 0062 LDS	R5,s_count+1
     26A 0C42      ADD	R4,R2
     26B 1C53      ADC	R5,R3
     26C 9250 006A STS	angle+1,R5
     26E 9240 0069 STS	angle,R4
(0136) 			}
     270 C010      RJMP	0x0281
(0137) 			else
(0138) 			{
(0139) 				angle = s_count-(AngleCountTime*256+TCNT0);
     271 B622      IN	R2,0x32
     272 9040 0063 LDS	R4,AngleCountTime
     274 9050 0064 LDS	R5,AngleCountTime+1
     276 2C34      MOV	R3,R4
     277 9040 0061 LDS	R4,s_count
     279 9050 0062 LDS	R5,s_count+1
     27B 1842      SUB	R4,R2
     27C 0853      SBC	R5,R3
     27D 9250 006A STS	angle+1,R5
     27F 9240 0069 STS	angle,R4
(0140) 			}
(0141) 			Data[1] =angle>>8;
     281 9020 0069 LDS	R2,angle
     283 9030 006A LDS	R3,angle+1
     285 2C23      MOV	R2,R3
     286 2433      CLR	R3
     287 FC27      SBRC	R2,7
     288 9430      COM	R3
     289 9220 006E STS	Data+1,R2
(0142) 			Data[2] =angle&0x00FF;	
     28B 9180 0069 LDS	R24,angle
     28D 9190 006A LDS	R25,angle+1
     28F 7090      ANDI	R25,0
     290 9380 006F STS	Data+2,R24
(0143) 			TransmitByte('A');
     292 E401      LDI	R16,0x41
     293 DE22      RCALL	_TransmitByte
(0144) 			SendString(Data);	
     294 E60D      LDI	R16,0x6D
     295 E010      LDI	R17,0
     296 DE42      RCALL	_SendString
(0145) 			break;
     297 C043      RJMP	0x02DB
(0146) 
(0147) 		case 'B'://position
(0148) 			pos = TCNT1H*256+TCNT1L;
     298 B42C      IN	R2,0x2C
     299 B43D      IN	R3,0x2D
     29A 9230 006C STS	pos+1,R3
     29C 9220 006B STS	pos,R2
(0149) 			Data[1] =pos>>8;
     29E 2C23      MOV	R2,R3
     29F 2433      CLR	R3
     2A0 FC27      SBRC	R2,7
     2A1 9430      COM	R3
     2A2 9220 006E STS	Data+1,R2
(0150) 			Data[2] =pos&0x00FF;	
     2A4 9180 006B LDS	R24,pos
     2A6 9190 006C LDS	R25,pos+1
     2A8 7090      ANDI	R25,0
     2A9 9380 006F STS	Data+2,R24
(0151) 			TransmitByte('B');
     2AB E402      LDI	R16,0x42
     2AC DE09      RCALL	_TransmitByte
(0152) 			SendString(Data);	
     2AD E60D      LDI	R16,0x6D
     2AE E010      LDI	R17,0
     2AF DE29      RCALL	_SendString
(0153) 			break;
     2B0 C02A      RJMP	0x02DB
(0154) 
(0155) 		case 'C'://Clear Command
(0156) 			 InitAngle();//only init angle, position imformation will not clear.
     2B1 DEE9      RCALL	_InitAngle
(0157) 			 TransmitByte('C');
     2B2 E403      LDI	R16,0x43
     2B3 DE02      RCALL	_TransmitByte
(0158) 			 SendString(Data);
     2B4 E60D      LDI	R16,0x6D
     2B5 E010      LDI	R17,0
     2B6 DE22      RCALL	_SendString
(0159) 			break;
     2B7 C023      RJMP	0x02DB
(0160) 
(0161) 		case 'S'://switch, key
(0162) 			TransmitByte('S');
     2B8 E503      LDI	R16,0x53
     2B9 DDFC      RCALL	_TransmitByte
(0163) 			//if(PINA & (1 << PA2));		
(0164) 			
(0165) 			PORTC = PINC;
     2BA B223      IN	R2,0x13
     2BB BA25      OUT	0x15,R2
(0166) 			TransmitByte(PORTC);
     2BC B305      IN	R16,0x15
     2BD DDF8      RCALL	_TransmitByte
(0167) 			
(0168) 			PORTA = PINA;
     2BE B229      IN	R2,0x19
     2BF BA2B      OUT	0x1B,R2
(0169) 			TransmitByte(PORTA);
     2C0 B30B      IN	R16,0x1B
     2C1 DDF4      RCALL	_TransmitByte
(0170) 			TransmitByte('#');
     2C2 E203      LDI	R16,0x23
     2C3 DDF2      RCALL	_TransmitByte
(0171) 			break;
     2C4 C016      RJMP	0x02DB
(0172) 			
(0173) 		case 'R'://version information
(0174) 			 for(i = 0;VER[i]!='\0';i++)
     2C5 2744      CLR	R20
     2C6 2755      CLR	R21
     2C7 C00A      RJMP	0x02D2
(0175) 			 {
(0176) 			  TransmitByte(VER[i]);
FILE: <library>
     2C8 2F8C      MOV	R24,R28
     2C9 2F9D      MOV	R25,R29
     2CA 2FE4      MOV	R30,R20
     2CB 2FF5      MOV	R31,R21
     2CC 0FE8      ADD	R30,R24
     2CD 1FF9      ADC	R31,R25
     2CE 8100      LDD	R16,Z+0
     2CF DDE6      RCALL	_TransmitByte
     2D0 5F4F      SUBI	R20,0xFF
     2D1 4F5F      SBCI	R21,0xFF
     2D2 2F8C      MOV	R24,R28
     2D3 2F9D      MOV	R25,R29
     2D4 2FE4      MOV	R30,R20
     2D5 2FF5      MOV	R31,R21
     2D6 0FE8      ADD	R30,R24
     2D7 1FF9      ADC	R31,R25
     2D8 8020      LDD	R2,Z+0
     2D9 2022      TST	R2
     2DA F769      BNE	0x02C8
     2DB CEEF      RJMP	0x01CB
     2DC 9660      ADIW	R28,0x10
     2DD 9508      RET
push_xgset300C:
     2DE 935A      ST	R21,-Y
     2DF 934A      ST	R20,-Y
     2E0 92BA      ST	R11,-Y
     2E1 92AA      ST	R10,-Y
     2E2 9508      RET
pop_xgset300C:
     2E3 90A9      LD	R10,Y+
     2E4 90B9      LD	R11,Y+
     2E5 9149      LD	R20,Y+
     2E6 9159      LD	R21,Y+
     2E7 9508      RET
asgncblk:
     2E8 93AA      ST	R26,-Y
     2E9 93BA      ST	R27,-Y
     2EA 93EA      ST	R30,-Y
     2EB 93FA      ST	R31,-Y
     2EC 920A      ST	R0,-Y
     2ED 81AF      LDD	R26,Y+7
     2EE 85B8      LDD	R27,Y+8
     2EF 81ED      LDD	R30,Y+5
     2F0 81FE      LDD	R31,Y+6
     2F1 3000      CPI	R16,0
     2F2 0701      CPC	R16,R17
     2F3 F031      BEQ	0x02FA
     2F4 95C8      LPM
     2F5 920D      ST	R0,X+
     2F6 9631      ADIW	R30,1
     2F7 5001      SUBI	R16,1
     2F8 4010      SBCI	R17,0
     2F9 CFF7      RJMP	0x02F1
     2FA 9009      LD	R0,Y+
     2FB 91F9      LD	R31,Y+
     2FC 91E9      LD	R30,Y+
     2FD 91B9      LD	R27,Y+
     2FE 91A9      LD	R26,Y+
     2FF 9624      ADIW	R28,4
     300 9508      RET
